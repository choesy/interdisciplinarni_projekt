/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 18.04.2022 17:08:30

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 14288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,6435 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*65] = { 
  /* [0][0][][] */ -87,22,-89,34,56,-87,16,43,47,-81,-28,46,-14,83,-50,-95,-38,-15,-44,-52,-97,37,-9,35,89,86,-127,1,-3,-50,-74,19,-62,-22,96,47,-103,-68,-11,-113,93,26,75,-43,-17,69,66,-96,12,-28,78,-32,-76,-47,-34,79,-43,-49,15,-27,-77,-75,46,-52,-20, -93,-115,-43,25,16,-58,59,85,-20,-70,-87,-49,-9,-75,-55,-4,-62,-15,59,78,32,68,18,-39,-69,-58,-20,-10,47,-12,37,-103,-87,-49,88,72,28,35,-92,20,65,-67,-64,-35,82,-88,-46,38,-18,-49,-16,72,38,62,-51,-62,-94,84,20,44,62,-121,73,-101,-41, -102,-3,-38,-78,-104,-5,-52,-47,-44,44,-3,-101,-115,-95,-16,-30,51,-5,25,40,12,-27,-49,18,-64,-74,-82,-29,-61,-25,-75,82,-33,-8,63,42,-117,-26,-82,67,-19,-8,0,-112,-86,79,27,-56,-21,-104,-23,23,53,-3,-44,-45,-98,-17,30,75,38,17,58,5,7, 
  /* [1][0][][] */ -3,48,23,-26,2,27,-6,0,-19,-87,-17,-16,-67,-59,12,26,1,25,-23,22,-39,51,-12,-63,26,-50,-108,14,-31,-93,-108,57,-4,66,-72,12,-90,16,21,-28,-14,11,23,-32,-15,-31,-27,-40,-20,-11,-13,-33,33,-50,-62,-58,-54,25,-9,-39,-21,-19,-17,-42,-13, -16,29,7,-15,1,5,38,24,-38,-92,-3,-56,-15,-2,-64,-55,-5,-9,8,-53,-57,-102,50,-73,-28,-66,-62,-37,-50,-127,-87,22,-25,-52,-11,-104,-82,-37,-29,-102,-52,-72,-55,-8,6,19,7,-18,-27,-34,-26,-49,48,66,0,-34,-16,-21,-26,-23,-10,-22,-21,-18,-31, -13,29,15,-48,-27,8,-50,9,-21,6,-21,-35,-12,-4,80,79,67,88,52,21,60,-51,48,-35,-16,-13,6,45,-47,-25,8,27,38,65,37,42,22,-27,35,34,32,81,0,-10,38,-32,-24,14,-52,-21,14,-10,-92,-47,-37,-40,-88,-43,-43,-68,-73,-46,-60,-41,-53, 
  /* [2][0][][] */ -64,-28,-54,-70,-44,-109,14,-4,-19,-51,42,29,89,75,-20,-84,8,-40,13,-8,7,-6,3,18,-39,-17,-3,-44,-47,16,22,30,65,-14,17,53,-12,-39,4,-114,-119,-112,-95,-44,18,76,0,-98,-46,-1,22,1,31,-44,-60,-25,18,-49,30,8,-32,-27,-57,-40,2, -127,6,21,-60,-34,-77,40,-52,-27,-7,17,53,47,6,-5,-75,-46,-19,7,10,18,20,54,15,-28,4,35,36,43,25,49,47,-2,10,16,38,-18,-50,-18,-126,-105,-54,-76,-72,13,28,35,-14,-14,-19,28,28,-26,9,-98,24,-22,-5,43,6,17,-27,-64,-41,1, -26,-41,-51,-86,11,-47,72,8,4,4,90,24,75,71,12,4,-38,-68,33,51,37,26,44,34,15,-12,29,55,48,57,69,20,39,25,14,-21,13,-72,-52,-76,-76,-105,-46,-37,18,61,0,10,0,15,-11,12,-20,-38,-34,-54,-4,-16,11,30,-2,-58,-42,30,31, 
  /* [3][0][][] */ -58,-5,-20,17,5,-12,-23,54,-37,-1,-13,11,-14,38,21,27,33,5,-17,15,-3,97,57,-127,-12,-9,-10,33,-16,25,18,28,41,-34,-26,-26,-35,17,2,20,75,60,9,-45,-18,-32,-6,-77,-58,-1,-87,-38,18,-28,-18,44,-1,-6,-87,-48,-15,44,63,-32,-16, -40,-27,8,-13,-17,66,-47,21,16,-26,-4,-35,-1,41,-1,46,8,51,22,49,-14,82,45,-47,-35,-23,17,44,-4,44,-53,20,42,-1,-9,-8,-41,7,-31,52,79,5,66,-84,-19,-59,-51,-85,-15,-3,-50,-108,-9,49,44,45,14,-27,-20,13,13,19,65,28,-37, -56,10,2,12,-22,-2,-4,39,-9,-10,-24,32,6,40,-12,66,-16,34,-10,-17,-16,63,7,-51,-43,-29,18,35,55,-14,-40,40,-11,7,-17,-33,-26,1,-2,7,58,62,34,-50,-71,1,-23,9,-16,-56,-74,-19,36,40,26,8,-1,-4,-28,-25,41,30,68,30,-35, 
  /* [4][0][][] */ -2,54,8,-2,57,-22,-84,-127,-118,-29,-86,-23,-31,-51,-75,-48,-29,-50,-6,-9,-23,-63,-18,-4,2,-7,21,-7,39,10,17,-13,-10,-16,-61,-9,31,3,-14,24,-30,21,18,0,20,37,2,-37,-26,26,6,-1,-6,-7,-26,0,-7,-40,18,21,-11,-20,-8,34,-4, 6,-13,-12,20,47,26,-38,-94,-30,20,-41,-3,-9,-33,-17,-28,-18,-17,9,8,-39,-53,-19,-8,-1,8,31,-16,21,-8,5,-22,-26,-1,-45,-9,5,-2,-46,25,-27,34,30,33,-7,-14,-10,-30,-26,19,14,41,-7,8,8,-4,-38,-40,19,-12,-3,-4,-4,-13,-11, 8,55,24,1,40,-4,1,-69,-84,-28,-61,-16,-50,-3,-70,1,7,-20,2,-12,-32,-92,-9,-2,-16,-16,25,1,-6,19,31,-3,-67,-22,-50,-17,11,-17,-26,10,-14,14,28,-7,74,-12,-13,-55,-19,11,-13,19,5,25,-9,-17,-25,-27,49,-6,17,2,36,47,3, 
  /* [5][0][][] */ -25,-34,-5,-8,-16,-7,-10,-13,10,-55,-45,-30,-36,-40,-61,-51,-69,-66,-114,-73,-84,-86,-86,-69,-97,-127,-38,-82,-77,-51,-43,-68,-100,-41,-74,-63,-69,-79,-47,-25,-15,-68,-41,-25,-37,-36,-26,-55,-55,-27,-26,-88,-68,-13,-33,-59,-36,-48,6,-18,-46,-37,-17,-43,-34, 4,1,-8,-2,28,29,56,18,24,39,13,-2,34,49,35,-4,27,26,4,24,5,29,60,21,-55,-34,-1,-13,26,14,26,-1,-48,-26,-15,-20,-11,-1,-39,33,62,42,34,16,42,-12,-26,-18,0,17,-42,-45,-31,-22,27,-9,-8,-30,1,-13,-9,-13,20,28,8, -5,-25,-43,16,18,4,9,-32,-33,-40,-27,-38,-6,-32,-56,-67,-85,-55,-54,-69,-70,-58,-42,-48,-88,-53,-50,-65,-92,-3,-75,-78,-66,-9,-40,-14,2,-30,-21,-15,-9,-38,-10,-10,-6,-33,-24,-20,-35,16,-33,-32,-75,-46,-62,-70,14,0,-14,20,-6,-13,-49,-9,-53, 
  /* [6][0][][] */ -121,-8,-75,-100,-25,-81,50,-27,-38,36,37,62,49,11,6,-29,-14,-23,-21,-52,-13,-41,-22,54,-14,-34,-41,-9,33,-20,-29,-49,-44,47,-27,40,3,-58,-55,-46,-83,-93,-71,-14,-8,19,-12,-76,-35,-18,22,0,-24,-31,-85,19,-61,-24,-55,13,-18,-5,7,-9,-43, -122,-45,-45,-20,-21,-44,-30,-60,-60,-6,95,55,60,4,12,-62,-23,-23,-18,-10,-4,-8,-6,47,48,11,19,3,11,4,40,-55,-60,-34,13,23,-15,-35,-24,-127,-116,-48,-66,-6,-19,-2,-23,-25,-4,36,34,25,-41,-10,-32,-13,-7,-80,-68,-45,-25,-64,-45,-44,-35, -44,30,-79,-68,-45,-107,-12,-21,-57,-24,19,4,54,57,-2,-36,-25,-9,1,6,14,-98,-59,40,-20,17,-6,24,-32,-6,10,-66,-66,-15,-10,10,7,-14,-51,-25,-112,-90,-10,-63,42,-35,56,3,-44,-22,6,42,22,-53,-87,-51,-40,-19,-41,-43,-16,8,-37,-79,-46, 
  /* [7][0][][] */ 37,37,-7,46,-11,-29,3,-6,29,58,19,27,9,58,1,-11,-40,-15,21,5,15,-61,0,102,51,37,-36,-63,9,34,-31,-74,-23,-37,-26,-24,120,21,41,29,-57,-32,25,69,-12,-4,1,68,76,-11,-28,26,-44,-44,-9,-96,31,-8,68,29,50,-11,10,-35,86, 50,78,6,34,-8,2,38,-17,27,-8,-7,-27,1,37,-24,-56,-80,-48,-52,-13,-75,-121,-37,34,25,-11,-4,-58,-15,-26,-32,-127,-50,2,2,-28,106,65,46,32,-19,-29,34,43,29,-36,5,37,64,6,1,-75,-54,-66,-25,12,12,51,46,44,54,-51,-123,-20,62, 36,60,25,44,-51,-12,37,-48,4,39,9,30,0,24,-10,-21,-42,-55,-5,-9,-36,-68,-65,34,20,13,-61,-32,-14,-22,-47,-66,-37,45,-2,-20,33,-1,-6,39,-25,-29,64,60,-13,-27,38,54,15,-34,-18,-12,-41,24,-42,-8,-6,-2,100,102,59,-7,-16,-18,50, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,65 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0015511823585256934, 0.010462925769388676, 0.0051212813705205917, 0.0060107088647782803, 0.011442342773079872, 0.0057960445992648602, 0.0034572852309793234, 0.0050449389964342117, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -5402, 1520, 16002, -1265, -2286, -16730, 16074, -12974, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 6.0830684560642112e-06, 4.1031082218978554e-05, 2.0083458366570994e-05, 2.3571408746647649e-05, 4.4871936552226543e-05, 2.272958772664424e-05, 1.3557982128986623e-05, 1.9784076357609592e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -29,-120,-27,49,-58,-39,-18,-58, 39,-60,-70,-58,-92,-33,-51,-43, 24,-127,-65,59,-28,59,-26,-30, 
  /* [1][0][][] */ -29,-109,-52,-78,-53,-27,-80,7, -35,-87,0,-34,-90,-45,-90,-45, 24,46,-57,127,-10,-5,-70,6, 
  /* [2][0][][] */ -28,127,-7,-45,-76,11,-84,-25, 20,-16,-4,-1,-44,-50,-62,-28, -9,-44,-25,-48,-60,4,-23,-31, 
  /* [3][0][][] */ -19,127,-42,9,-18,3,-48,17, -9,-55,-9,55,-15,-13,10,-35, 0,-26,29,-3,-33,-5,38,-20, 
  /* [4][0][][] */ 6,9,80,4,80,-8,-61,-31, -41,-109,0,5,16,10,-39,112, 38,-127,59,2,85,95,-86,54, 
  /* [5][0][][] */ 24,-45,-50,-33,-20,59,-42,127, -35,48,36,80,3,18,-120,-66, -19,-22,-14,31,31,63,-9,-43, 
  /* [6][0][][] */ 32,77,19,85,-55,15,-103,-30, 10,-86,-34,-23,-83,5,-89,-5, -18,127,-63,-10,-63,-14,-111,-16, 
  /* [7][0][][] */ -20,-29,89,-16,67,46,4,31, 13,-13,6,-3,127,21,-3,-50, -34,-49,0,-10,73,38,-33,46, 
  /* [8][0][][] */ -18,-24,65,-23,103,8,-17,39, -3,-10,-5,-3,127,28,7,22, 0,-29,45,-33,101,2,11,1, 
  /* [9][0][][] */ -14,-18,-8,11,56,36,18,-92, -3,127,111,7,2,-7,-29,-13, -31,-68,4,32,-10,-16,-51,-33, 
  /* [10][0][][] */ -9,-40,50,7,50,-34,-27,63, 38,-37,74,3,127,78,64,-12, 3,-38,41,-10,24,7,26,-24, 
  /* [11][0][][] */ 10,-127,-22,68,3,-73,-74,18, -12,-33,16,-16,-80,6,-56,58, 27,68,-53,76,-76,-77,-38,-7, 
  /* [12][0][][] */ 22,-24,1,-21,127,33,4,-22, -9,-26,53,-23,98,-15,19,43, 2,-12,8,-31,112,44,-11,27, 
  /* [13][0][][] */ -4,78,-95,45,-104,-40,-51,-44, -29,-64,-97,-15,-64,5,-69,-51, -14,25,-127,41,-83,7,-10,-27, 
  /* [14][0][][] */ 0,-19,53,32,-38,43,-34,-24, 11,127,-27,-21,-38,6,-85,-31, -11,-87,5,-21,-50,-7,-77,-9, 
  /* [15][0][][] */ 30,127,-26,64,-87,-58,-69,-34, -11,-8,-50,-53,-44,29,-43,-29, 25,-53,-69,-45,-79,11,-31,-11, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0056507806293666363, 0.0063868989236652851, 0.010202964767813683, 0.010454427450895309, 0.0065856324508786201, 0.0062120584771037102, 0.0081317238509654999, 0.0081216068938374519, 0.010481618344783783, 0.008326415903866291, 0.0064126555807888508, 0.0054870899766683578, 0.0094166891649365425, 0.0065946574322879314, 0.0096848597750067711, 0.0075294394046068192, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 2405, -1201, -348, -4135, -333, -3145, -1872, -23, 210, -5361, -803, -1679, 58, 3190, 712, 1307, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 4.0217597415903583e-05, 4.5456679799826816e-05, 7.2616290708538145e-05, 7.4405994382686913e-05, 4.6871100494172424e-05, 4.4212309148861095e-05, 5.787490590591915e-05, 5.780290302936919e-05, 7.4599520303308964e-05, 5.9260564739815891e-05, 4.563999391393736e-05, 3.9052581996656954e-05, 6.7020228016190231e-05, 4.6935332647990435e-05, 6.8928849941585213e-05, 5.3588340961141512e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  47, 48, 8, -24, 29, 78, 52, 18, -32, 36, -21, 63, -32, 24, 26, 50, 38, 4, 33, 13, 3, 37, 16, -29, -21, -69, 13, 21, -39, 27, -63, 41, 15, 24, 17, -40, -5, -34, -14, -27, -37, 26, -19, 1, -54, 2, 35, 32, 2, -33, 23, 32, 13, 2, -17, 12, 16, -7, 5, 12, -11, -2, 1, 32, 6, -15, -10, -41, -7, -51, 7, 2, -32, -32, -21, 1, -63, 9, 6, 16, 15, 30, 27, -48, -25, -33, -52, -36, -47, -127, -60, -20, -60, 25, -37, 6, 17, 74, -19, -15, -10, 12, 4, -12, -20, -50, -5, 25, -32, 26, -76, 16, 21, 16, -6, 0, -5, 13, 52, 13, 3, 43, 1, 37, -35, 21, 34, 60, -4, 8, 83, 48, 15, 24, 65, -20, -4, 20, -6, 21, -14, 17, 73, 78, -9, -14, 81, 54, -16, -8, 23, -27, -22, -23, -34, 12, -23, 25, -7, 44, -31, 29, 42, 37, 13, -5, -18, 12, -26, -29, -17, 4, -8, 5, 11, 8, 26, 62, -13, 36, -25, 69, 28, -10, -29, -8, 25, 28, -19, 38, -17, 10, 17, 4, 27, 21, 14, -23, 107, -33, -7, 36, 24, 42, -29, 28, 2, 91, 7, -18, 54, 76, -7, -6, 18, 5, -29, 52, 23, -9, -7, 9, 30, 35, -4, -30, -34, -78, -8, -19, -19, -11, -15, 19, 6, -12, -29, -8, -18, -32, -8, -20, 37, 30, -18, 13, -36, -13, -26, 53, 4, -38, -31, 2, 24, -2, 2, -9, 9, 0, -14, -12, 6, -3, -32, 61, 22, -14, -2, -18, -17, -8, 19, 24, 30, -32, -28, -13, -13, -13, -23, -61, -23, -10, -7, 31, -6, 29, -30, -8, -30, -49, -24, -2, -77, -54, -15, -8, 34, -6, -25, -25, -122, -8, -9, 51, 12, -23, -4, 3, 6, 5, -12, -55, -7, 9, 15, 3, -57, -8, 7, 1, 12, 10, -13, 14, 58, -9, -21, 0, -7, 15, -6, 21, 36, 61, -2, -30, 77, 83, -61, 17, 47, -48, -54, 47, -10, -10, -48, 15, 77, 63, 29, 35, 79, -9, -30, -56, 5, -23, -40, -68, -25, -4, -28, 13, -39, 8, 32, -2, 32, 21, -18, 49, 19, -41, 6, -53, 18, 21, 2, 30, 6, 20, 45, 72, -11, 22, -111, 23, 38, -38, -27, 10, -4, 5, -53, 72, 26, 43, 
  -42, -76, -10, 23, -16, -80, -38, -9, 36, -31, 22, -58, 31, -24, -31, -65, -27, -14, -16, -11, -11, -33, -25, 25, 0, 60, 13, -31, 42, -20, 68, -23, -16, -21, -14, 28, 6, 18, 24, 22, 21, -15, 25, 19, 45, -16, -24, -25, 10, 34, -13, -19, -12, -3, 11, 2, -7, -13, 12, -13, 12, -20, 0, -23, -14, 23, 5, 12, 4, 38, 5, 9, 31, 9, 10, 1, 55, -2, -19, -22, -28, -25, -10, 36, 15, 24, 70, 29, 33, 107, 58, -1, 54, -18, 40, -5, -8, -57, 44, 18, 8, -13, 17, 10, 34, 55, 5, -22, 13, -33, 81, -15, -15, -26, 9, -2, -6, -36, -51, -4, 10, -41, 4, -24, 29, -29, -27, -62, 2, -9, -78, -33, -6, -31, -67, 29, 27, -20, 23, -12, 13, -1, -72, -78, 12, 0, -69, -33, 29, 2, -24, 18, 39, 30, 50, -7, 32, -30, 17, -66, 30, -18, -24, -27, -5, 1, 18, 5, 2, 10, 33, -12, -16, 5, 13, -21, -13, -49, 14, -25, 2, -76, -13, 11, 3, 29, -24, -18, 16, -33, 8, -10, -16, -3, -39, -36, 7, 15, -104, 28, 27, -46, -20, -33, 36, -27, -1, -79, 14, 7, -40, -80, 0, -8, -16, -2, 5, -45, -30, 0, 15, -14, -40, -35, 13, 28, 46, 91, 33, 37, 24, 1, 18, 0, -8, 3, 33, -15, 35, 47, -6, 25, -29, -13, 5, -11, 18, 12, 25, -33, 3, 23, 33, 0, -18, -5, 22, 13, 12, 9, 7, 39, 9, -3, 21, -59, -46, 6, 6, 7, 34, 9, -15, -24, -54, 28, 4, 11, 28, 14, 4, 57, 32, 2, 2, -42, 8, -33, 35, 7, 37, 53, 4, -8, 65, 61, -1, 14, -5, 11, 27, 5, 120, 30, -14, -44, -15, 6, -4, -10, 18, -13, 5, 42, 19, -12, 9, 0, 28, 13, -15, 26, -17, -17, 21, -14, -77, 24, 8, -8, 2, -27, 5, -2, -56, -64, 1, 17, -83, -67, 51, -6, -51, 61, 44, -63, 26, 39, 48, -36, -89, -67, -10, -12, -70, -8, 22, 55, -13, 23, 32, 69, 39, 16, 12, -6, 52, -9, -11, -26, -35, -29, 15, -54, -14, 40, -1, 40, -21, -17, -1, -50, 18, -12, -43, -70, 23, -19, 118, -2, -38, 34, 51, -16, 9, 11, 77, -65, -22, -23, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0081434724852442741, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { 305, -305, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 8.172110392479226e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,65 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0071171754971146584, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0071171754971146584, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0071171754971146584, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0071171754971146584, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.010035166516900063, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.010035166516900063, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.010035166516900063, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.010035166516900063, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.11099056154489517, } };
const TfArray<1, int> quant21_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6448, (TfLiteIntArray*)&tensor_dimension0, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6448, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
